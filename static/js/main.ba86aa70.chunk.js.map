{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/drop-down/drop-down.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","name","type1","type2","CardList","setProperties","poke_results","newList","results","forEach","item","push","itemProperties","setAllPokemon","all_pokemon","i","setSprite","url","id","setId","sprite","substring","lastIndexOf","fetch","then","response","json","updateStateAttributes","pokemon","this","monsters","map","key","Component","SearchBox","placeholder","handleChange","onChange","type","App","allPokes","setState","update","state","$set","sprites","front_default","types","handleSearchChange","e","searchField","target","value","handleDropDownChange","searchType","typeFilter","toLowerCase","includes","filtered_pokemon","filter","options","label","defaultValue","isClearable","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba86aa70.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => (\n\n    <div className=\"card-container\">\n        {/* <img alt=\"monster\" src={`${props.monster.sprite}`}></img> */}\n        {/* <img alt=\"monster\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${props.monster.id}.png`}></img> */}\n        <img className=\"image\" alt=\"monster\" src={`https://img.pokemondb.net/artwork/large/${props.monster.name}.jpg`}></img>\n        <h2 className=\"name\"> {props.monster.name} </h2>\n        \n        { props.monster.type1 &&\n            <p className=\"type\"> Type 1: {props.monster.type1} </p>\n        }\n        { props.monster.type2 &&\n            <p className=\"type\"> Type 2: {props.monster.type2} </p>\n        }\n        \n    </div>\n)","import React, {Component} from 'react'\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component';\n\n\nclass CardList extends Component {\n\n    componentDidMount() {\n        fetch('https://pokeapi.co/api/v2/pokemon?limit=151')\n        .then(response => response.json())\n        .then(pokemon => this.setProperties(pokemon));\n        \n      }\n    \n      setProperties = (poke_results) => {\n        let newList = [];\n        poke_results.results.forEach(item => newList.push(this.itemProperties(item)));\n\n        this.props.setAllPokemon(newList);    \n        this.props.all_pokemon.forEach((item, i) => this.setSprite(item, i))\n      }\n    \n      itemProperties = (item) => {\n        return {\n          name: item.name, \n          url: item.url,\n          id: this.setId(item),\n          sprite: ''\n        }\n      }\n    \n      setId = item => {\n        let id = item.url.substring(34, item.url.lastIndexOf(\"/\"))\n        return id;\n      }\n    \n      setSprite = (item, i) => {\n        fetch(item.url)\n        .then(response => response.json())\n        .then(response => this.props.updateStateAttributes(response, i) )\n      }\n\n    render() {\n      \n        return <div className=\"card-list\">\n            {this.props.monsters && this.props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster} />\n            ))}\n        </div>\n    };\n}\n\nexport default CardList;","import React from 'react'\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input onChange={handleChange} \n    className=\"search\"\n    type=\"search\" \n    placeholder={placeholder} />\n)","import React, {Component} from 'react'\n// import './search-box.styles.css'\n\nclass DropDown extends Component {\n    render() {\n\n\n        return <select onChange={this.props.handleChange} \n        className=\"drop-down\"\n        >\n            {this.props.options.map(option => (\n                console.log(option)\n                // <option value=\"Red\">Red</option>\n            ) )}\n        </select>\n    };\n}\n\nexport default DropDown;","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport update from 'immutability-helper';\nimport DropDown from './components/drop-down/drop-down.component';\nimport Select from 'react-select'\n\n\nclass App extends Component {\n\n  constructor() {\n\n    super();\n\n    this.state = {\n      all_pokemon: [\n\n      ],\n      searchField: '',\n      searchType: 'Name'\n    };  \n  }\n\n  setAllPokemon = allPokes => {\n    this.setState({all_pokemon: allPokes});\n  }\n\n  updateStateAttributes = (response, i) => {\n    this.setState({\n      all_pokemon: update(this.state.all_pokemon, \n        {[i]: {sprite: {$set: response.sprites.front_default } },\n         [i]: {type1: {$set: response.types[0].type.name} } } )\n    } )\n    if (response.types[1]) {\n      this.setState({\n        all_pokemon: update(this.state.all_pokemon, \n          {[i]: {type2: {$set: response.types[1].type.name} } } )\n      } )\n    }\n  }\n\n  handleSearchChange = e => {\n    this.setState({searchField: e.target.value});\n  }\n\n  handleDropDownChange = e => {\n    if (e === null) {\n      this.setState({searchType: \"\"});\n    }\n    else {\n      this.setState({searchType: e.value});\n    }\n  }\n\n  typeFilter = (monster, searchField) => {\n    if (monster.type1 && monster.type1.toLowerCase().includes(searchField.toLowerCase()) ) {\n      return true;\n    }\n    else if (monster.type2 && monster.type2.toLowerCase().includes(searchField.toLowerCase()) ) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  render() {\n\n    const { all_pokemon, searchField, searchType } = this.state;\n    let filtered_pokemon;\n    if (searchType === \"Name\") {\n      filtered_pokemon = all_pokemon.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    }\n    else if (searchType === \"Type\") {\n      filtered_pokemon = all_pokemon.filter(monster => \n        this.typeFilter(monster, searchField)\n      );\n    }\n    else {\n      filtered_pokemon = all_pokemon;\n    }\n\n    const options = [\n      { value: 'Name', label: 'Name' },\n      { value: 'Type', label: 'Type' },\n    ]\n\n    return (\n      <div className=\"App\">\n        <h1>Pokedex</h1>\n\n        {/* <div className=\"myDiv\" style={{display: \"flex\"}}> */}\n          <SearchBox placeholder=\"search monsters\" \n          handleChange={this.handleSearchChange} />\n          \n          <Select \n          options={options} \n          defaultValue={options[0]}\n          className=\"myDropdown\" \n          placeholder=\"Search Type\" \n          isClearable\n          onChange={this.handleDropDownChange}\n          />\n        {/* </div> */}\n        \n        <CardList \n        all_pokemon={this.state.all_pokemon} \n        monsters={filtered_pokemon} \n        setAllPokemon = {this.setAllPokemon}\n        updateStateAttributes = {this.updateStateAttributes}\n        />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
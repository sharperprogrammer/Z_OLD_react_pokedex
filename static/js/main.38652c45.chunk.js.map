{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","key","App","derp","poke_results","setState","all_pokemon","results","setProperties","item","setId","setSprite","url","substring","lastIndexOf","fetch","then","response","json","sprite","sprites","front_default","state","pokemon","this","forEach","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAGaA,G,kBAAO,SAACC,GAAD,OAEhB,yBAAKC,UAAU,kBAEX,yBAAKC,IAAI,UAAUC,IAAG,mFAA8EH,EAAMI,QAAQC,GAA5F,UACtB,gCAAML,EAAMI,QAAQE,KAApB,QCJKC,EAAW,SAAAP,GACpB,OACI,yBAAKC,UAAU,aACVD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OACvB,kBAAC,EAAD,CAAMM,IAAKN,EAAQC,GAAID,QAASA,SCuDjCO,E,YAvDb,aAAe,IAAD,8BACZ,+CAgBFC,KAAO,SAACC,GACN,EAAKC,SAAS,CAACC,YAAaF,EAAaG,WAlB7B,EAsBdC,cAAgB,SAACC,GACf,EAAKC,MAAMD,GACX,EAAKE,UAAUF,IAxBH,EA2BdC,MAAQ,SAAAD,GACN,IAAIb,EAAKa,EAAKG,IAAIC,UAAU,GAAIJ,EAAKG,IAAIE,YAAY,MAErDL,EAAKb,GAAKA,GA9BE,EAiCde,UAAY,SAAAF,GACVM,MAAMN,EAAKG,KACVI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIR,EAAKU,OAASF,EAASG,QAAQC,kBAjCjD,EAAKC,MAAQ,CACXhB,YAAa,IAJH,E,iFAUO,IAAD,OAClBS,MAAM,+CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAO,GAAO,OAAI,EAAKpB,KAAKoB,Q,+BA0BnB,IAAD,OAMP,OAFAC,KAAKF,MAAMhB,YAAYmB,SAAQ,SAAAhB,GAAI,OAAI,EAAKD,cAAcC,MAGxD,yBAAKjB,UAAU,OACb,uCACA,kBAAC,EAAD,CAAUO,SAAUyB,KAAKF,MAAMhB,mB,GAlDrBoB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.38652c45.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => (\n\n    <div className=\"card-container\">\n        {/* <img alt=\"monster\" src={`${props.monster.sprite}`}></img> */}\n        <img alt=\"monster\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${props.monster.id}.png`}></img>\n        <h2> {props.monster.name} </h2>\n    </div>\n)","import React from 'react'\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => {\n    return (\n        <div className=\"card-list\">\n            {props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster} />\n            ))}\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\n// import { SearchBox } from './components/search-box/search-box.component';\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      all_pokemon: [\n\n      ]\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=151')\n    .then(response => response.json())\n    .then(pokemon => this.derp(pokemon));\n    \n  }\n\n  derp = (poke_results) => {\n    this.setState({all_pokemon: poke_results.results});\n    // this.state.all_pokemon.forEach(item => this.setProperties(item))\n  }\n\n  setProperties = (item) => {\n    this.setId(item);\n    this.setSprite(item);\n  }\n\n  setId = item => {\n    let id = item.url.substring(34, item.url.lastIndexOf(\"/\"))\n    // console.log(id);\n    item.id = id;\n  }\n\n  setSprite = item => {\n    fetch(item.url)\n    .then(response => response.json())\n    .then(response => item.sprite = response.sprites.front_default)\n  }\n\n  render() {\n\n    // this.state.all_pokemon.forEach(item => console.log(item));\n\n    this.state.all_pokemon.forEach(item => this.setProperties(item))\n\n    return (\n      <div className=\"App\">\n        <h1>Pokedex</h1>\n        <CardList monsters={this.state.all_pokemon} />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}